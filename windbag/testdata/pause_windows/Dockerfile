ARG RELEASEID=1809
# NB(thxCode): automatic platform ARGs, ref to:
# - https://docs.docker.com/engine/reference/builder/#automatic-platform-args-in-the-global-scope
ARG TARGETPLATFORM
ARG TARGETOS
ARG TARGETARCH

# --
# -- construct builder,
# -- copy from https://github.com/docker-library/golang/blob/9db5bdce040682d60ae8b10a055306c544f42b01/1.12/windows/windowsservercore-1809/Dockerfile
# --

FROM mcr.microsoft.com/windows/servercore:${RELEASEID} as builder
MAINTAINER weijia.mwj "weijia.mwj@alibaba-inc.com"

# $ProgressPreference: https://github.com/PowerShell/PowerShell/issues/2138#issuecomment-251261324
SHELL ["powershell", "-Command", "$ErrorActionPreference = 'Stop'; $ProgressPreference = 'SilentlyContinue';"]

# install MinGit (especially for "go get")
# https://blogs.msdn.microsoft.com/visualstudioalm/2016/09/03/whats-new-in-git-for-windows-2-10/
# "Essentially, it is a Git for Windows that was stripped down as much as possible without sacrificing the functionality in which 3rd-party software may be interested."
# "It currently requires only ~45MB on disk."
ENV GIT_VERSION 2.23.0
ENV GIT_TAG v${GIT_VERSION}.windows.1
ENV GIT_DOWNLOAD_URL https://github.com/git-for-windows/git/releases/download/${GIT_TAG}/MinGit-${GIT_VERSION}-64-bit.zip
ENV GIT_DOWNLOAD_SHA256 8f65208f92c0b4c3ae4c0cf02d4b5f6791d539cd1a07b2df62b7116467724735

# steps inspired by "chcolateyInstall.ps1" from "git.install" (https://chocolatey.org/packages/git.install)
RUN Write-Host ('Downloading {0} ...' -f $env:GIT_DOWNLOAD_URL); \
    [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; \
    Invoke-WebRequest -Uri $env:GIT_DOWNLOAD_URL -OutFile 'git.zip'; \
    \
    Write-Host ('Verifying sha256 ({0}) ...' -f $env:GIT_DOWNLOAD_SHA256); \
    if ((Get-FileHash git.zip -Algorithm sha256).Hash -ne $env:GIT_DOWNLOAD_SHA256) { \
        Write-Host 'FAILED!'; \
        exit 1; \
    }; \
    \
    Write-Host 'Expanding ...'; \
    Expand-Archive -Path git.zip -DestinationPath C:\git\.; \
    \
    Write-Host 'Removing ...'; \
    Remove-Item git.zip -Force; \
    \
    Write-Host 'Updating PATH ...'; \
    $env:PATH = 'C:\git\cmd;C:\git\mingw64\bin;C:\git\usr\bin;' + $env:PATH; \
    [Environment]::SetEnvironmentVariable('PATH', $env:PATH, [EnvironmentVariableTarget]::Machine); \
    \
    Write-Host 'Verifying install ("git version") ...'; \
    git version; \
    \
    Write-Host 'Complete.';

# ideally, this would be C:\go to match Linux a bit closer, but C:\go is the recommended install path for Go itself on Windows
ENV GOPATH C:\\gopath

# PATH isn't actually set in the Docker image, so we have to set it from within the container
RUN $newPath = ('{0}\bin;C:\go\bin;{1}' -f $env:GOPATH, $env:PATH); \
    Write-Host ('Updating PATH: {0}' -f $newPath); \
    [Environment]::SetEnvironmentVariable('PATH', $newPath, [EnvironmentVariableTarget]::Machine);

# doing this first to share cache across versions more aggressively
ENV GOLANG_VERSION 1.12.16

RUN $url = ('https://golang.org/dl/go{0}.windows-amd64.zip' -f $env:GOLANG_VERSION); \
    Write-Host ('Downloading {0} ...' -f $url); \
    Invoke-WebRequest -Uri $url -OutFile 'go.zip'; \
    \
    $sha256 = 'd2a570e4872ba2260fb6369e2e9cc217e8f1541388d6f790520eeaf4447fef2f'; \
    Write-Host ('Verifying sha256 ({0}) ...' -f $sha256); \
    if ((Get-FileHash go.zip -Algorithm sha256).Hash -ne $sha256) { \
        Write-Host 'FAILED!'; \
        exit 1; \
    }; \
    \
    Write-Host 'Expanding ...'; \
    Expand-Archive go.zip -DestinationPath C:\; \
    \
    Write-Host 'Removing ...'; \
    Remove-Item go.zip -Force; \
    \
    Write-Host 'Verifying install ("go version") ...'; \
    go version; \
    \
    Write-Host 'Complete.';

WORKDIR $GOPATH

# --
# -- build pause loop,
# -- git clone from https://github.com/kubernetes-sigs/windows-testing
# --

RUN $target = 'src\github.com\kubernetes-sigs\windows-testing'; \
    git clone https://github.com/kubernetes-sigs/windows-testing $target; \
    \
    pushd $target; git checkout 3fea3d48ea8337b2aaca755c1d719e34b45f46b9; \
    \
    pushd images\pause; go build -o pauseloop.exe .; popd; \
    \
    popd;

# --
# -- build wincat,
# -- git clone from https://github.com/kubernetes-sigs/sig-windows-tools
# --

RUN $target = 'src\github.com\kubernetes-sigs\sig-windows-tools'; \
    git clone https://github.com/kubernetes-sigs/sig-windows-tools $target; \
    \
    pushd $target; git checkout ec6c23d23560a7a7e69bf447685d7862760bf361; \
    \
    pushd cmd\wincat; go build -o wincat.exe .; popd; \
    \
    popd;


# --
# -- construct pauser
# --

FROM mcr.microsoft.com/windows/nanoserver:${RELEASEID}
MAINTAINER weijia.mwj "weijia.mwj@alibaba-inc.com"

# copy artifacts from builder
COPY --from=builder /Windows/System32/certoc.exe /Windows/System32/netapi32.dll /Windows/System32/
COPY --from=builder /gopath/src/github.com/kubernetes-sigs/sig-windows-tools/cmd/wincat/wincat.exe /Windows/System32/
COPY --from=builder /gopath/src/github.com/kubernetes-sigs/windows-testing/images/pause/pauseloop.exe /Windows/System32/

CMD pauseloop.exe
